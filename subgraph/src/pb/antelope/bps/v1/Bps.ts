// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Pay } from "./Pay";
import { Reg } from "./Reg";

export class Bps {
  static encode(message: Bps, writer: Writer): void {
    const vpays = message.vpays;
    for (let i: i32 = 0; i < vpays.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Pay.encode(vpays[i], writer);
      writer.ldelim();
    }

    const bpays = message.bpays;
    for (let i: i32 = 0; i < bpays.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Pay.encode(bpays[i], writer);
      writer.ldelim();
    }

    const regs = message.regs;
    for (let i: i32 = 0; i < regs.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Reg.encode(regs[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Bps {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Bps();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.vpays.push(Pay.decode(reader, reader.uint32()));
          break;

        case 2:
          message.bpays.push(Pay.decode(reader, reader.uint32()));
          break;

        case 3:
          message.regs.push(Reg.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  vpays: Array<Pay>;
  bpays: Array<Pay>;
  regs: Array<Reg>;

  constructor(
    vpays: Array<Pay> = [],
    bpays: Array<Pay> = [],
    regs: Array<Reg> = []
  ) {
    this.vpays = vpays;
    this.bpays = bpays;
    this.regs = regs;
  }
}
